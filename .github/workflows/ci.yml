name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.part == 'backend'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (backend)
        if: matrix.part == 'backend'
        run: npm ci
        working-directory: ./backend

      - name: Run ESLint
        if: matrix.part == 'backend'
        run: npm run lint
        working-directory: ./backend

      - name: Set up Flutter
        if: matrix.part == 'frontend'
        uses: subosito/flutter-action@v2

      - name: Disable analytics (frontend)
        if: matrix.part == 'frontend'
        run: flutter config --no-analytics

      - name: Install dependencies (frontend)
        if: matrix.part == 'frontend'
        run: flutter pub get
        working-directory: ./frontend

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        part: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        if: matrix.part == 'backend'
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (backend)
        if: matrix.part == 'backend'
        run: npm ci
        working-directory: ./backend

      - name: Run tests (backend)
        if: matrix.part == 'backend'
        run: npm test
        working-directory: ./backend

      - name: Set up Flutter
        if: matrix.part == 'frontend'
        uses: subosito/flutter-action@v2

      - name: Disable analytics (frontend)
        if: matrix.part == 'frontend'
        run: flutter config --no-analytics

      - name: Install dependencies (frontend)
        if: matrix.part == 'frontend'
        run: flutter pub get
        working-directory: ./frontend

      - name: Run tests (frontend)
        if: matrix.part == 'frontend'
        run: flutter test
        working-directory: ./frontend

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: DockerHub
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-tca:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-tca:latest

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-tca:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-tca:latest
